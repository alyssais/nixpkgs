From a289cf233b57252d7e8ce66a91dcc3204ab24514 Mon Sep 17 00:00:00 2001
From: Alyssa Ross <hi@alyssa.is>
Date: Sun, 27 Dec 2020 11:05:10 +0000
Subject: [PATCH] Make cargo metadata --no-deps print all path deps

Including those outside the current workspace.

This allows for finding all local code without having to recursively
call Cargo, which is useful for rustfmt and other tools.

Fixes: https://github.com/rust-lang/cargo/issues/7483
---
 src/bin/cargo/commands/metadata.rs     |  2 +-
 src/cargo/ops/cargo_output_metadata.rs | 40 +++++++++++++--
 tests/testsuite/metadata.rs            | 68 +++++++++++++++++++++++++-
 3 files changed, 104 insertions(+), 6 deletions(-)

diff --git a/src/tools/cargo/src/bin/cargo/commands/metadata.rs b/src/tools/cargo/src/bin/cargo/commands/metadata.rs
index 9618aa56a..2cfe705e5 100644
--- a/src/tools/cargo/src/bin/cargo/commands/metadata.rs
+++ b/src/tools/cargo/src/bin/cargo/commands/metadata.rs
@@ -52,7 +52,7 @@ pub fn exec(config: &mut Config, args: &ArgMatches<'_>) -> CliResult {
         version,
     };
 
-    let result = ops::output_metadata(&ws, &options)?;
+    let result = ops::output_metadata(&ws, config, &options)?;
     config.shell().print_json(&result);
     Ok(())
 }
diff --git a/src/tools/cargo/src/cargo/ops/cargo_output_metadata.rs b/src/tools/cargo/src/cargo/ops/cargo_output_metadata.rs
index a3aaf2e7a..716a28d73 100644
--- a/src/tools/cargo/src/cargo/ops/cargo_output_metadata.rs
+++ b/src/tools/cargo/src/cargo/ops/cargo_output_metadata.rs
@@ -5,6 +5,7 @@ use crate::core::{Dependency, Package, PackageId, Workspace};
 use crate::ops::{self, Packages};
 use crate::util::interning::InternedString;
 use crate::util::CargoResult;
+use crate::Config;
 use cargo_platform::Platform;
 use serde::Serialize;
 use std::collections::BTreeMap;
@@ -24,7 +25,7 @@ pub struct OutputMetadataOptions {
 /// Loads the manifest, resolves the dependencies of the package to the concrete
 /// used versions - considering overrides - and writes all dependencies in a JSON
 /// format to stdout.
-pub fn output_metadata(ws: &Workspace<'_>, opt: &OutputMetadataOptions) -> CargoResult<ExportInfo> {
+pub fn output_metadata(ws: &Workspace<'_>, config: &Config, opt: &OutputMetadataOptions) -> CargoResult<ExportInfo> {
     if opt.version != VERSION {
         anyhow::bail!(
             "metadata version {} not supported, only {} is currently supported",
@@ -33,10 +34,10 @@ pub fn output_metadata(ws: &Workspace<'_>, opt: &OutputMetadataOptions) -> Cargo
         );
     }
     let (packages, resolve) = if opt.no_deps {
-        let packages = ws.members().cloned().collect();
+        let packages = path_packages(ws, config)?;
         (packages, None)
     } else {
         let (packages, resolve) = build_resolve_graph(ws, opt)?;
         (packages, Some(resolve))
     };
 
@@ -101,9 +102,41 @@ impl From<&Dependency> for DepKindInfo {
     }
 }
 
+fn path_packages_r(package: &Package, found: &mut Vec<Package>, cfg: &Config) -> CargoResult<()> {
+    if found.contains(package) {
+        return Ok(());
+    }
+    found.push(package.clone());
+
+    for dependency in package.dependencies() {
+        let source_id = dependency.source_id();
+
+        if !source_id.is_path() {
+            continue;
+        }
+
+        if let Ok(mut path) = source_id.url().to_file_path() {
+            path.push("Cargo.toml");
+            path_packages_r(Workspace::new(&path, &cfg)?.current()?, found, cfg)?;
+        }
+    }
+
+    Ok(())
+}
+
+fn path_packages(ws: &Workspace<'_>, cfg: &Config) -> CargoResult<Vec<Package>> {
+    let mut found = Vec::new();
+
+    for package in ws.members() {
+        path_packages_r(package, &mut found, cfg)?;
+    }
+
+    Ok(found)
+}
+
 /// Builds the resolve graph as it will be displayed to the user.
 fn build_resolve_graph(
     ws: &Workspace<'_>,
     metadata_opts: &OutputMetadataOptions,
 ) -> CargoResult<(Vec<Package>, MetadataResolve)> {
     // TODO: Without --filter-platform, features are being resolved for `host` only.
diff --git a/src/tools/cargo/tests/testsuite/metadata.rs b/src/tools/cargo/tests/testsuite/metadata.rs
index 08a1a25ea..c25579e39 100644
--- a/src/tools/cargo/tests/testsuite/metadata.rs
+++ b/src/tools/cargo/tests/testsuite/metadata.rs
@@ -870,12 +870,26 @@ fn workspace_metadata_no_deps() {
             r#"
                 [workspace]
                 members = ["bar", "baz"]
+                exclude = ["qux"]
             "#,
         )
         .file("bar/Cargo.toml", &basic_lib_manifest("bar"))
         .file("bar/src/lib.rs", "")
-        .file("baz/Cargo.toml", &basic_lib_manifest("baz"))
+        .file(
+            "baz/Cargo.toml",
+            r#"
+                [package]
+                name = "baz"
+                version = "0.5.0"
+                authors = ["wycats@example.com"]
+
+                [dependencies]
+                qux = { path = "../qux" }
+            "#,
+        )
         .file("baz/src/lib.rs", "")
+        .file("qux/Cargo.toml", &basic_lib_manifest("qux"))
+        .file("qux/src/lib.rs", "")
         .build();
 
     p.cargo("metadata --no-deps")
@@ -929,7 +943,20 @@ fn workspace_metadata_no_deps() {
                 "id": "baz[..]",
                 "keywords": [],
                 "source": null,
-                "dependencies": [],
+                "dependencies": [
+                  {
+                    "features": [],
+                    "kind": null,
+                    "name": "qux",
+                    "optional": false,
+                    "registry": null,
+                    "rename": null,
+                    "req": "*",
+                    "source": null,
+                    "target": null,
+                    "uses_default_features": true
+                  }
+                ],
                 "license": null,
                 "license_file": null,
                 "links": null,
@@ -950,6 +977,43 @@ fn workspace_metadata_no_deps() {
                 "manifest_path": "[..]baz/Cargo.toml",
                 "metadata": null,
                 "publish": null
+            },
+            {
+                "authors": [
+                    "wycats@example.com"
+                ],
+                "categories": [],
+                "name": "qux",
+                "readme": null,
+                "repository": null,
+                "homepage": null,
+                "documentation": null,
+                "version": "0.5.0",
+                "id": "qux[..]",
+                "keywords": [],
+                "source": null,
+                "dependencies": [],
+                "license": null,
+                "license_file": null,
+                "links": null,
+                "description": null,
+                "edition": "2015",
+                "targets": [
+                    {
+                        "kind": [ "lib" ],
+                        "crate_types": ["lib"],
+                        "doc": true,
+                        "doctest": true,
+                        "test": true,
+                        "edition": "2015",
+                        "name": "qux",
+                        "src_path": "[..]qux/src/lib.rs"
+                    }
+                ],
+                "features": {},
+                "manifest_path": "[..]qux/Cargo.toml",
+                "metadata": null,
+                "publish": null
             }
         ],
         "workspace_members": ["bar 0.5.0 (path+file:[..]bar)", "baz 0.5.0 (path+file:[..]baz)"],
-- 
2.27.0

